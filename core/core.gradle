
plugins {
    // required for jacoco test coverage checks
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

project.ext {
    // TODO Will need tasks associated with jacoco to actually use these limits
    // TODO Generally the goal here is to have code coverage in the 80--90% range
    // but it may be better to approach this with a more directed focus
    // (i.e. increase code coverage when new functionality is added)
    // TODO Write unit tests!
    codeCoverageLimits = [
            'instruction': 0.0, // currently at 0.0%
            'branch'     : 0.0, // currently at 0.0%
            'line'       : 0.0, // currently at 0.0%
            'complexity' : 0.0, // currently at 0.0%
            'method'     : 0.0, // currently at 0.0%
            'class'      : 0.0  // currently at 0.0%
    ]
}

apply plugin: 'groovy'

apply plugin: 'java'
// this needs to be set after the 'java' plugin has been applied
sourceCompatibility = 1.11
targetCompatibility = 1.11

apply plugin: 'jacoco'
jacoco {
    // This version is necessary to run under JDK 1.11
    toolVersion = "0.8.2"
}

// this needs to be set after the 'java' plugin has been applied
sourceCompatibility = 1.11
targetCompatibility = 1.11

// run the findBugs checks with 'gradle check' or 'gradle findBugsMain' or 'gradle findBugsTest'
//apply plugin: 'findbugs'

// run the pmd source code analyzer with 'gradle check' or 'gradle pmdMain' or 'gradle pmdTest'
apply plugin: 'pmd' // source code analyzer

setVersion(project.ext.versionNumber)

dependencies {
    // localGroovy (which is currently 2.4.x) is used. Groovy 2.5.x supports JsonGenerator which could be used
    // in SipJsonGenerator, but causes issues with downstream builds, so alternatives provided by Groovy 2.4.x are used.
    // We explicitly include the groovy-all version so the dependency shows up correctly.
    //compile localGroovy()
    compile "org.codehaus.groovy:groovy-all:2.4.15"

    // The latest version.
    compile "com.google.guava:guava:27.0.1-jre"
    // The latest version.
    compile "org.apache.commons:commons-lang3:3.8.1"
    // The latest version.
    compile "commons-io:commons-io:2.6"
    // The latest version. We expect that the container running this jar has a slf4j dependency in its path already.
    compileOnly "org.slf4j:slf4j-api:1.7.25"
    // Current version used in production by the National Library of New Zealand.
    compile "com.exlibris.dps:dps-sdk-fat-all:5.5.0"

    // For PDF processing.
    compile "org.apache.pdfbox:pdfbox:2.0.12"

    // The latest version.
    testCompile "junit:junit:4.12"

    // The latest version.
    testCompile "org.mockito:mockito-core:1.10.19", {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }

    // The latest version.
    testCompile "org.powermock:powermock-module-junit4:1.7.4"
    testCompile "org.powermock:powermock-api-mockito2:1.7.4"

    // Use gson for comparing JSON strings.
    testCompile "com.google.code.gson:gson:2.8.5"

    // Use xmlunit for comparing XML strings.
    testCompile "org.xmlunit:xmlunit-core:2.6.2"

    // Use sl4j logging for tests. The latest version.
    testCompile "org.slf4j:slf4j-log4j12:1.7.25"

}

jar {
    includeEmptyDirs = false
}

task jarSources(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    includeEmptyDirs = false

    from sourceSets.main.allSource
}

//tasks.withType(FindBugs) {
//    // Unfortunately FindBugs will find a lot of problems with Groovy classes. We could filter out groovy source files,
//    // but since FindBugs operates on .class files, that filtering will be ineffective. Currently there are no java
//    // classes but that could change in the future.
//    // See https://stackoverflow.com/questions/22037499/using-excludes-config-in-findbugs-and-checkstyle-plugin-in-gradle
//    // In order for Java classes to see Groovy classes easily, we compile them all together with the Groovy compiler
//    // in the same source tree (src/main/groovy). This means we can't use the path to determine if the .class file
//    // came from a Groovy or Java source. The net effect is that FindBugs won't work with a mixed heritage of
//    // Java and Groovy classes. So we remove the FindBugs plugin for now.
//    exclude '**/*.groovy'
//    classes = classes.filter {
//        !(it.path.contains(new File("classes/groovy/main").path) || it.path.contains(new File("classes/groovy/test").path))
//    }
//}

// We want to force a specific version as part of our dependency resolution
//configurations.all {
//    resolutionStrategy {
//        force 'org.codehaus.groovy:groovy-all:2.4.+'
//    }
//}

artifacts {
    publishableArtifacts jar, jarSources
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact tasks.jarSources
        }
    }

    repositories {
        maven {
            mavenLocal()
        }
    }
}

build.dependsOn jar, jarSources
